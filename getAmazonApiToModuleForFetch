const SellingPartnerAPI = require('amazon-sp-api');
const {google} = require('googleapis');
const fs = require('fs');
require('dotenv').config();

const auth = new google.auth.GoogleAuth({
    credentials:{
        type: process.env.TYPE,
        project_id: process.env.PROJECT_ID,
        private_key_id: process.env.PRIVATE_KEY_ID,
        private_key: process.env.PRIVATE_KEY.replace(/\\n/g, '\n'),
        client_email: process.env.CLIENT_EMAIL,
        client_id: process.env.CLIENT_ID,
        auth_uri: process.env.AUTH_URI,
        token_uri: process.env.TOKEN_URI,
        auth_provider_x509_cert_url: process.env.AUTH_PROVIDER_X509_CERT_URL,
        client_x509_cert_url: process.env.CLIENT_X509_CERT_URL,
        universe_domain:process.env.UNIVERSE_DOMAIN
    }, 
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const sheets = google.sheets({
    version: 'v4', 
    auth
});


const readValue = async (spreadsheetId,range) =>{ 
  
  // const spreadsheetId = process.env.SPREADSHEET_ID; 
  // const range = 'fetchProdInfo!A2:A'; // データ取得の範囲を設定
  
    const request = {
      spreadsheetId,
      range,
    };    
    try {   
      const response = await sheets.spreadsheets.values.get(request);
      const sheetValues = response.data.values;
      return sheetValues;
    } catch (err) {
      console.error(err);
    }
}


const getCatalogItem = async(asin) => {//const getShipments = 
    // const apiDataArray = [];
    let resCatalog;
    let resPrice;
    let resultArray = []

    try {
      let sellingPartner = new SellingPartnerAPI({
        region:'na', // The region to use for the SP-API endpoints ("eu", "na" or "fe")
        refresh_token: process.env.refresh_token, // The refresh token of your app user
        credentials:{
            SELLING_PARTNER_APP_CLIENT_ID: process.env.SELLING_PARTNER_APP_CLIENT_ID,
            SELLING_PARTNER_APP_CLIENT_SECRET: process.env.SELLING_PARTNER_APP_CLIENT_SECRET,
            AWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID,
            AWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY,
            AWS_SELLING_PARTNER_ROLE:process.env.AWS_SELLING_PARTNER_ROLE
          }
      });

      resPrice = await sellingPartner.callAPI({
        operation:'getCompetitivePricing',
        endpoint:'productPricing',
        query: {
            MarketplaceId: 'A2EUQ1WTGCTBG2', // Ca A2EUQ1WTGCTBG2 / US ATVPDKIKX0DER // MX A1AM78C64UM0Y8
            Asins:[asin],
            ItemType:'Asin',
        }
        });

      resCatalog = await sellingPartner.callAPI({
        operation:'getCatalogItem',
        endpoint:'catalogItems',
        path:{
            asin:asin
        },
        query: {
            marketplaceIds: ['A2EUQ1WTGCTBG2'], // Ca A2EUQ1WTGCTBG2 / US ATVPDKIKX0DER // MX A1AM78C64UM0Y8
            includedData:['attributes','images','identifiers','summaries','salesRanks']
        },
        options:{
            version:'2022-04-01'
            }
        });


        resultArray.push(resCatalog.attributes?.item_name[0]?.value ?? 'no name');
        resultArray.push(resCatalog.summaries[0].brand),  
        resultArray.push(resCatalog.identifiers[0]?.identifiers[0]?.identifier ?? 'no identifier')
        // resultArray.push(resCatalog.attributes.list_price ? resCatalog.attributes?.list_price[0]?.value ?? 'no name' : 'no data')
        resultArray.push(resPrice[0]?.Product?.CompetitivePricing?.CompetitivePrices[0]?.Price.LandedPrice.Amount ?? "")
        resultArray.push(resPrice[0]?.Product?.CompetitivePricing?.CompetitivePrices[0]?.Price.LandedPrice.CurrencyCode ?? "")
        resultArray.push(resPrice[0]?.Product?.CompetitivePricing?.NumberOfOfferListings[0]?.condition ?? "")
        resultArray.push(resPrice[0]?.Product?.CompetitivePricing?.NumberOfOfferListings[0]?.Count ?? "")
        resultArray.push(resPrice[0]?.Product?.CompetitivePricing?.NumberOfOfferListings[1]?.condition ?? "")
        resultArray.push(resPrice[0]?.Product?.CompetitivePricing?.NumberOfOfferListings[1]?.Count ?? "")
        resultArray.push(resPrice[0]?.Product?.CompetitivePricing?.NumberOfOfferListings[2]?.condition ?? "")
        resultArray.push(resPrice[0]?.Product?.CompetitivePricing?.NumberOfOfferListings[2]?.Count ?? "")
        resultArray.push(resCatalog.salesRanks[0]?.classificationRanks?.[0]?.title ?? 'no rank data')
        resultArray.push(resCatalog.salesRanks[0]?.classificationRanks?.[0]?.rank ?? 'no rank data')
        resultArray.push(resCatalog.salesRanks[0]?.displayGroupRanks?.[0]?.title ?? 'no rank data')
        resultArray.push(resCatalog.salesRanks[0]?.displayGroupRanks?.[0]?.rank ?? 'no rank data')
        // Amazonもしくは保証という文字を含んでいる場合は空文字をpushする
        for (let i = 0; i < 5; i++ ){
          let bulletStr = resCatalog.attributes?.bullet_point?.[i]?.value ?? '';
          if(checkStringIncludes(bulletStr,"Amazon","保証")) {
            resultArray.push(bulletStr)
          } else{
            resultArray.push("");
          };
        }
        // resultArray.push(resCatalog.attributes?.bullet_point?.[0]?.value ?? '')
        // resultArray.push(resCatalog?.attributes?.bullet_point?.[1]?.value  ?? '')
        // resultArray.push(resCatalog?.attributes?.bullet_point?.[2]?.value  ?? '')
        // resultArray.push(resCatalog?.attributes?.bullet_point?.[3]?.value  ?? '')
        // resultArray.push(resCatalog?.attributes?.bullet_point?.[4]?.value  ?? '')
        resultArray.push(resCatalog.attributes?.item_package_weight ? resCatalog.attributes?.item_package_weight[0]?.unit ?? 'no package weight' : 'no package weight data')
        resultArray.push(resCatalog.attributes?.item_package_weight ? resCatalog.attributes?.item_package_weight[0]?.value ?? 'no package weight': 'no package weight data')
        resultArray.push(resCatalog.attributes?.item_package_dimensions ? resCatalog.attributes?.item_package_dimensions[0]?.length.unit ?? 'no package dimensions' : 'no package dimentions data')
        resultArray.push(resCatalog.attributes?.item_package_dimensions ? resCatalog.attributes?.item_package_dimensions[0]?.length.value ?? 'no package dimensions': 'no package dimentions data')
        resultArray.push(resCatalog.attributes?.item_package_dimensions ? resCatalog.attributes?.item_package_dimensions[0]?.width.value ?? 'no package dimensions': 'no package dimentions data')
        resultArray.push(resCatalog.attributes?.item_package_dimensions ? resCatalog.attributes?.item_package_dimensions[0]?.height.value ?? 'no package dimensions': 'no package dimentions data')  
        resultArray.push(resCatalog.images[0]?.images[0]?.link?? '')
        resultArray.push(resCatalog.images[0]?.images[3]?.link?? '')
        resultArray.push(resCatalog.images[0]?.images[6]?.link?? '')
        resultArray.push(resCatalog.images[0]?.images[9]?.link?? '')
        resultArray.push(resCatalog.images[0]?.images[12]?.link?? '')
        resultArray.push(resCatalog.images[0]?.images[15]?.link ?? '')
        resultArray.push(resCatalog.images[0]?.images[18]?.link ?? '')
        // console.log(`result array is `,resultArray);

    // await apiDataArray.push(resultArray);
    // console.log(`asin:${asin} success`,)
    return resultArray
    } catch(e){
      console.log(`probably ASIN:${asin} page is not exist`,e)
      return resultArray
    };
    // return resCatalog;
    
  }; 
// スクレイピングツール用
  const getCatalogItemFromSheet = async (spreadsheetId,range) => {
    const apiDataArray = [];
    const sheetValues = await readValue(spreadsheetId,range);
    console.log(`sheetvalue is`,sheetValues)
    const asins = sheetValues.flat();
    console.log(`asins is `, asins)


    for(const asin of asins){
        let fetchedData = await getCatalogItem(asin);
        apiDataArray.push(fetchedData);

    }
    // console.log(`apiDataArray is`,apiDataArray);

    return apiDataArray;
  };

  // 特定キーワードのトップ20を取得

  const getSearchCatalogItems = async(keywordArray) => {//const getShipments = 

    try {
      let sellingPartner = new SellingPartnerAPI({
        region:'na', // The region to use for the SP-API endpoints ("eu", "na" or "fe")
        refresh_token: process.env.refresh_token, // The refresh token of your app user
        credentials:{
            SELLING_PARTNER_APP_CLIENT_ID: process.env.SELLING_PARTNER_APP_CLIENT_ID,
            SELLING_PARTNER_APP_CLIENT_SECRET: process.env.SELLING_PARTNER_APP_CLIENT_SECRET,
            AWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID,
            AWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY,
            AWS_SELLING_PARTNER_ROLE:process.env.AWS_SELLING_PARTNER_ROLE
          }
      });

      resSearch = await sellingPartner.callAPI({
        operation:'searchCatalogItems',
        endpoint:'catalogItems',
        query: {
            keywords:keywordArray,
            marketplaceIds: ['A2EUQ1WTGCTBG2'], // Ca A2EUQ1WTGCTBG2 / US ATVPDKIKX0DER // MX A1AM78C64UM0Y8
            pageSize:20
        },                
        options:{
            version:'2022-04-01'
            }
        });


    return resSearch
    } catch(e){
      console.log(e)
    };    
  }; 


  // dev for ranktraker

  const getAsinRank = async(asin) => {//const getShipments = 
    // const apiDataArray = [];
    let resCatalog;
    let resultArray = []
    let resultObject = {
      infos:[],
      categories : [],
      ranks:[],
    }
    

    try {
      let sellingPartner = new SellingPartnerAPI({
        region:'na', // The region to use for the SP-API endpoints ("eu", "na" or "fe")
        refresh_token: process.env.refresh_token, // The refresh token of your app user
        credentials:{
            SELLING_PARTNER_APP_CLIENT_ID: process.env.SELLING_PARTNER_APP_CLIENT_ID,
            SELLING_PARTNER_APP_CLIENT_SECRET: process.env.SELLING_PARTNER_APP_CLIENT_SECRET,
            AWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID,
            AWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY,
            AWS_SELLING_PARTNER_ROLE:process.env.AWS_SELLING_PARTNER_ROLE
          }
      });


      resCatalog = await sellingPartner.callAPI({
        operation:'getCatalogItem',
        endpoint:'catalogItems',
        path:{
            asin:asin
        },
        query: {
            marketplaceIds: ['A2EUQ1WTGCTBG2'], // Ca A2EUQ1WTGCTBG2 / US ATVPDKIKX0DER // MX A1AM78C64UM0Y8
            includedData:['attributes','images','identifiers','summaries','salesRanks']
        },
        options:{
            version:'2022-04-01'
            }
        });

        resultObject.infos.push(resCatalog.attributes?.item_name[0]?.value ?? 'no name');
        resultObject.infos.push(resCatalog.summaries[0].brand),  
        resultObject.ranks.push(resCatalog.salesRanks[0]?.classificationRanks?.[0]?.rank ?? 'no rank data')
        resultObject.categories.push(resCatalog.salesRanks[0]?.classificationRanks?.[0]?.title ?? 'no rank data')
        resultObject.ranks.push(resCatalog.salesRanks[0]?.displayGroupRanks?.[0]?.rank ?? 'no rank data')
        resultObject.categories.push(resCatalog.salesRanks[0]?.displayGroupRanks?.[0]?.title ?? 'no rank data')
        
        resultArray.push(resultObject)
        // console.log(resultArray)

    // await apiDataArray.push(resultArray);
    return resultArray
    // console.log(apiDataArray)
    } catch(e){
      return resultArray
    };
    // return resCatalog;
    
  }; 

  // getAsinRank('B09Q6DTJRR')

  const getAsinRankFromSheet = async () => {
    const apiDataArray = [];
    const spreadsheetId = process.env.SPREADSHEET_ID_K; 
    const range = 'RankTracker!C2:C'; // データ取得の範囲


    const sheetValues = await readValue(spreadsheetId,range);
    console.log(`sheetvalue is`,sheetValues)
    const asins = sheetValues.flat();
    console.log(`asins is `, asins)


    for(const asin of asins){
        let fetchedData = await getAsinRank(asin);
        apiDataArray.push(fetchedData);
    }
    console.log(`apiDataArray is`,apiDataArray);

    return apiDataArray;

  };
  

  const checkStringIncludes = (targetStr,str1,str2) =>{
   return !targetStr.includes(str1) && !targetStr.includes(str2)
  }


  // getAsinRankFromSheet();



  // getSearchCatalogItems(["Kinto"])

  // getCatalogItemFromSheet();

  // // getPricing  dev 
  // const getCompetitivePricing = async() => {//const getShipments = 
  //   let resPrice;
  //   let resultArray = []

  //   try {
  //     let sellingPartner = new SellingPartnerAPI({
  //       region:'fe', // The region to use for the SP-API endpoints ("eu", "na" or "fe")
  //       refresh_token: process.env.refresh_token, // The refresh token of your app user
  //       credentials:{
  //           SELLING_PARTNER_APP_CLIENT_ID: process.env.SELLING_PARTNER_APP_CLIENT_ID,
  //           SELLING_PARTNER_APP_CLIENT_SECRET: process.env.SELLING_PARTNER_APP_CLIENT_SECRET,
  //           AWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID,
  //           AWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY,
  //           AWS_SELLING_PARTNER_ROLE:process.env.AWS_SELLING_PARTNER_ROLE
  //         }
  //     });
  //   resPrice = await sellingPartner.callAPI({
  //       operation:'getCompetitivePricing',
  //       endpoint:'productPricing',
  //       query: {
  //           MarketplaceId: 'A1VC38T7YXB528', // Ca A2EUQ1WTGCTBG2 / US ATVPDKIKX0DER // MX A1AM78C64UM0Y8
  //           Asins:['B0CGD4B625'],
  //           ItemType:'Asin',
  //       }
  //       });
  //     console.log(resPrice[0]?.Product?.CompetitivePricing?.CompetitivePrices[0]?.Price.LandedPrice.Amount ?? "")
  //     console.log(resPrice[0]?.Product?.CompetitivePricing?.CompetitivePrices[0]?.Price.LandedPrice.CurrencyCode ?? "")
  //     console.log(resPrice[0]?.Product?.CompetitivePricing?.NumberOfOfferListings[0]?.condition ?? "")
  //     console.log(resPrice[0]?.Product?.CompetitivePricing?.NumberOfOfferListings[0]?.Count ?? "")
  //     console.log(resPrice[0]?.Product?.CompetitivePricing?.NumberOfOfferListings[1]?.condition ?? "")
  //     console.log(resPrice[0]?.Product?.CompetitivePricing?.NumberOfOfferListings[1]?.Count ?? "")
  //     console.log(resPrice[0]?.Product?.CompetitivePricing?.NumberOfOfferListings[2]?.condition ?? "")
  //     console.log(resPrice[0]?.Product?.CompetitivePricing?.NumberOfOfferListings[2]?.Count ?? "")
    
  //   } catch(e){
  //     console.log(e);
  //   };
    
  //   return res;
    
  // }; 
 

// getCatalogItemFromSheet()
  // getCompetitivePricing()

  module.exports ={
    getCatalogItemFromSheet,
    getSearchCatalogItems,
    getAsinRankFromSheet
  }
